// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"testwire/config"
	"testwire/internal/controller"
	"testwire/internal/middleware"
	"testwire/internal/repository"
	"testwire/internal/services"
)

// Injectors from injector.go:

// InitializeUserService khởi tạo UserService tự động
func InitializeApp() (*App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	db := config.ConnectDB(configConfig)
	userRepository := repository.NewUserRepositoryImpl(db)
	authenticationService := services.NewAuthenticationServiceImpl(userRepository)
	refreshTokenRepository := repository.NewRefreshTokenRepositoryImpl(db)
	refreshTokenService := services.NewRefreshTokenServiceImpl(refreshTokenRepository)
	authenticationController := controller.NewAuthenticationController(authenticationService, refreshTokenService)
	userSerive := services.NewUserServiceImpl(userRepository)
	userController := controller.NewUserController(userSerive)
	permissionRepository := repository.NewPermissionRepositoryImpl(db)
	middlewareMiddleware := middleware.NewMiddleware(userRepository, permissionRepository)
	client, err := config.NewElasticClient()
	if err != nil {
		return nil, err
	}
	productRepository := repository.NewProductRepositoryImpl(db, client)
	productService := services.NewProductServiceImpl(productRepository)
	productController := controller.NewProductController(productService, userSerive)
	app := &App{
		AuthController:    authenticationController,
		AuthService:       authenticationService,
		AuthRepo:          userRepository,
		UserController:    userController,
		Middleware:        middlewareMiddleware,
		ProductController: productController,
		ProductRepo:       productRepository,
	}
	return app, nil
}

// injector.go:

// Inject các dependency
var AppSet = wire.NewSet(config.LoadConfig, config.ConnectDB, RepositorySet,
	MiddlerwareSet,
	ServiceSet,
	ControllerSet,
	ClientSet, wire.Struct(new(App), "*"),
)

type App struct {
	AuthController    *controller.AuthenticationController
	AuthService       services.AuthenticationService
	AuthRepo          repository.UserRepository
	UserController    *controller.UserController
	Middleware        *middleware.Middleware
	ProductController *controller.ProductController
	ProductRepo       repository.ProductRepository
}
