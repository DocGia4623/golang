  services:
    # database:
    #   image: postgres
    #   restart: always
    #   environment:
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     - POSTGRES_DB=${POSTGRES_DB}
    #   ports:
    #     - "5433:5432"
    #   volumes:
    #     - db:/var/lib/postgresql/data
    #   networks:
    #     - app-network
    #   healthcheck:
    #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5

    redis:
      image: redis:latest
      restart: always
      environment:
        - LOG_FILE_PATH=/var/log/redis.log  # Đường dẫn log bên trong container
      ports:
        - "6379:6379"
      networks:
        - app-network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 3s
        retries: 3
    
    rabbitmq:
      image: rabbitmq:3-management
      container_name: rabbitmq
      restart: always
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
        - LOG_FILE_PATH=/var/log/rabbitmq.log
      ports:
        - "5672:5672"   # Cổng AMQP
        - "15672:15672" # Cổng giao diện web quản lý
      networks:
        - app-network
      healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

    # app:
    #   build: .
    #   restart: always
    #   ports:
    #     - "8081:8080"
    #   depends_on:
    #     database:
    #       condition: service_healthy
    #     rabbitmq:
    #       condition: service_healthy
    #     redis:  # Add redis dependency
    #       condition: service_healthy  # Ensure Redis is healthy before starting app        
    #   environment:
    #     - DB_HOST=database
    #     - DB_PORT=5432
    #     - DB_USER=${POSTGRES_USER}
    #     - DB_PASSWORD=${POSTGRES_PASSWORD}
    #     - DB_NAME=${POSTGRES_DB}
    #     - LOG_FILE_PATH=/app/logs/app.log
    #   volumes:
    #     - .:/app
    #   networks:
    #     - app-network

    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
      environment:
        - LOG_FILE_PATH=/app/logs/elastichsearch.log
        - discovery.type=single-node
        - ELASTIC_USERNAME=elastic
        - ELASTIC_PASSWORD=changeme
        - xpack.security.enabled=false
      ports:
        - "9200:9200"
      networks:
        - app-network
      

    kibana:
      image: docker.elastic.co/kibana/kibana:8.6.2
      environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      ports:
        - "5601:5601"
      networks:
        - app-network

    logstash:
      image: docker.elastic.co/logstash/logstash:8.6.2
      depends_on:
        - elasticsearch
      restart: always
      volumes:
        - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
        - /var/lib/docker/containers:/var/lib/docker/containers:ro
        - C:/Users/Admin/Desktop/test/logs:/logs

      networks:
        - app-network
      healthcheck:
        test: ["CMD-SHELL", "pgrep -f logstash || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        


  networks:
    app-network:
      driver: bridge

  volumes:
    db: