package main

import (
	"context"
	"errors"
	"log"
	"os"
	"os/signal"
	"testwire/config"
	"testwire/internal/middleware"
	"testwire/internal/repository"
	"testwire/internal/wire"
	"testwire/logs"
	"testwire/routes"

	_ "testwire/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title My API
// @version 1.0
// @description API for my project
// @host localhost:8080
// @BasePath /api/v1
func main() {
	// Handle SIGINT (CTRL+C) gracefully.
	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)
	defer stop()

	// Set up OpenTelemetry.
	otelShutdown, err := setupOTelSDK(ctx)
	if err != nil {
		return
	}
	// Handle shutdown properly so nothing leaks.
	defer func() {
		err = errors.Join(err, otelShutdown(context.Background()))
	}()
	logs.Init()

	router := gin.New()
	gin.SetMode(gin.ReleaseMode)
	appConfig, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}
	config.AppConfig = *appConfig
	router.Use(gin.Recovery(), gin.Logger(), middleware.TracingMiddleware())
	config.Connect(appConfig)

	app, err := wire.InitializeApp()
	if err != nil {
		log.Fatalf("Failed to initialize app: %v", err)
	}

	repository.SeedRolesAndPermissions()

	if err := app.ProductRepo.MigrateToElastic(); err != nil {
		log.Fatalf("Failed to migrate products to Elasticsearch: %v", err)
	}

	routes.AuthRoute(*app.AuthController, router)
	routes.UserRoute(*app.UserController, app.Middleware, router)
	routes.ProductRoute(*app.ProductController, app.Middleware, router)
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.Run(":8080")
}
